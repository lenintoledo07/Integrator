import { PoolDataProvider } from './contracts';
import { FlashLoanConfiguration, InterestRateMode, ReserveTokens, ReserveTokensAddress } from './types';
import { PoolDataProviderInterface } from './contracts/PoolDataProvider';
import { PoolInterface } from './contracts/Pool';
import * as common from '@protocolink/common';
export declare class Service extends common.Web3Toolkit {
    private _poolDataProvider?;
    get poolDataProvider(): PoolDataProvider;
    private _poolDataProviderIface?;
    get poolDataProviderIface(): PoolDataProviderInterface;
    private _poolIface?;
    get poolIface(): PoolInterface;
    private poolAddress?;
    getPoolAddress(): Promise<string>;
    private assetAddresses?;
    getAssetAddresses(): Promise<string[]>;
    private reserveTokensAddresses?;
    getReserveTokensAddresses(): Promise<ReserveTokensAddress[]>;
    private assets?;
    getAssets(): Promise<common.Token[]>;
    private aTokens?;
    getATokens(): Promise<common.Token[]>;
    private reserveTokens?;
    getReserveTokens(): Promise<ReserveTokens[]>;
    toAToken(asset: common.Token): Promise<common.Token>;
    toATokens(assets: common.Token[]): Promise<common.Token[]>;
    toAsset(aToken: common.Token): Promise<common.Token>;
    getDebtTokenAddress(asset: common.Token, interestRateMode: InterestRateMode): Promise<string>;
    getFlashLoanPremiumTotal(): Promise<number>;
    isDelegationApproved(account: string, delegateeAddress: string, assetAmount: common.TokenAmount, interestRateMode: InterestRateMode): Promise<boolean>;
    buildApproveDelegationTransactionRequest(delegateeAddress: string, assetAmount: common.TokenAmount, interestRateMode: InterestRateMode): Promise<common.TransactionRequest>;
    getFlashLoanConfiguration(assets: common.Token[]): Promise<FlashLoanConfiguration>;
}
